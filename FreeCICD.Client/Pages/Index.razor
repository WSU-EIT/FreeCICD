@page "/"
@page "/{TenantCode}"
@inject BlazorDataModel Model
@implements IDisposable
@inject HttpClient Http


@if (Model.Loaded && Model.View == _pageName) {
    if (!String.IsNullOrWhiteSpace(LogoUrl) && Model.Tenant.TenantSettings.LogoIncludedOnHomePage) {
        <div class="home-page-logo-container">
            <img src="@LogoUrl" class="logo-homepage" />
        </div>
    }

    <h1 class="page-title">
        @if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.AppIcon)) {
            <i>@((MarkupString)Model.Tenant.TenantSettings.AppIcon)</i>
        }
        <Language Tag="Welcome" ReplaceSpaces="true" /> @Model.User.FirstName
    </h1>

 <div class="container-fluid">
        <!-- Wizard Navigation Tabs -->
        <ul class="nav nav-tabs wizard-navigation">
            @for (int i = 0; i < StepNames.Length; i++)
            {
                <li class="nav-item">
                    <span class=@("nav-link " + (currentStep == i ? "active" : "") + " " + (i > currentStep ? "disabled-tab" : ""))>
                        @StepNames[i]
                    </span>
                </li>
            }
        </ul>

        <!-- Wizard Step Content -->
        <div class="wizard-tab-content">
            @if (currentStep == 0) {
                <!-- Step 0: Select PAT and org info -->

                <div class="card">
                    <div class="card-header">
                        Azure DevOps Credentials
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="patInput" class="form-label">Personal Access Token (PAT):</label>
                            <input type="password"
                                   disabled="@(_loading)"
                                   id="patInput"
                                   class="form-control"
                                   @bind="DevOpsPAT"
                                   placeholder="Enter your Azure DevOps PAT" />
                        </div>
                        <div class="mb-3">
                            <label for="orgNameInput" class="form-label">Organization Name:</label>
                            <input type="text"
                                   disabled="@(_loading)"
                                   id="orgNameInput"
                                   class="form-control"
                                   @bind="OrgName"
                                   placeholder="Enter your Organization Name" />
                        </div>
                    </div>
                    @if (_loading)
                    {
                        <div class="d-flex flex-column justify-content-center align-items-center my-5">
                            <div class="spinner-border text-primary" role="status" aria-label="Loading DevOps Info">
                                <span class="visually-hidden">Loading DevOps Info</span>
                            </div>
                            <div class="mt-3">
                                <p>Loading DevOps Info... please wait, this can take up to a minute.</p>
                            </div>
                        </div>

                        @if (_loading && _loadingMessages.Any())
                        {
                            <div class="card my-3">
                                <div class="card-header">
                                    <strong>Process Updates</strong>
                                </div>
                                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                                    <ul class="list-group list-group-flush">
                                        @foreach (var message in _loadingMessages)
                                        {
                                            <li class="list-group-item py-1">
                                                @message
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    }                  

                    <div class="card-footer text-end">
                        <button class="btn btn-primary"
                                @onclick="PATandOrgNameChangedWizard"
                                disabled="@(_loading || string.IsNullOrWhiteSpace(DevOpsPAT) || string.IsNullOrWhiteSpace(OrgName))">
                            Next
                        </button>
                    </div>
                     
                </div>
            }else if (currentStep == 1) {
                <!-- Step 1: Select Project -->
                <div class="card">
                    <div class="card-header">Select Project</div>
                    <div class="card-body">
                        <label class="form-label">Project:</label>
                        <select class="form-select" @onchange="ProjectChangedWizard">
                            <option value="">-- Select Project --</option>
                            @if (AzureOrgInfo != null)
                            {
                                @foreach (var proj in AzureOrgInfo.Projects.OrderBy(o => (string.Empty + o.ProjectName).ToLower()))
                                {
                                    <option value="@proj.ProjectId" selected="@(proj.ProjectId == SelectedProjectInfo?.ProjectId ? "selected" : null)">@proj.ProjectName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@(string.IsNullOrEmpty(SelectedProjectId))">Next</button>
                    </div>
                </div>
            } else if (currentStep == 2) {
                <!-- Step 2: Select Repository -->
                <div class="card">
                    <div class="card-header">Select Repository</div>
                    <div class="card-body">
                        <label class="form-label">Repository:</label>
                        <select class="form-select" @onchange="RepoChangedWizard">
                            <option value="">-- Select Repository --</option>
                            @if (SelectedProjectInfo != null)
                            {
                                @foreach (var repo in SelectedProjectInfo.GitRepos.OrderBy(o => (string.Empty + o.RepoName).ToLower()))
                                {
                                    <option value="@repo.RepoId" selected="@(repo.RepoId == SelectedRepoInfo?.RepoId ? "selected" : null)">@repo.RepoName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@(string.IsNullOrEmpty(SelectedRepoId))">Next</button>
                    </div>
                </div>
            } else if (currentStep == 3) {
                <!-- Step 3: Select Branch -->
                <div class="card">
                    <div class="card-header">Select Branch</div>
                    <div class="card-body">
                        <label class="form-label">Branch:</label>
                        <select class="form-select" @onchange="BranchChangedWizard">
                            <option value="">-- Select Branch --</option>
                            @if (SelectedRepoInfo != null)
                            {
                                @foreach (var branch in SelectedRepoInfo.GitBranches.OrderBy(o => (string.Empty + o.BranchName).ToLower()))
                                {
                                    <option value="@branch.BranchName" selected="@(branch.BranchName == SelectedBranchInfo?.BranchName ? "selected" : null)">@branch.BranchName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@(string.IsNullOrEmpty(SelectedBranch))">Next</button>
                    </div>
                </div>
            } else if (currentStep == 4) {
                <!-- Step 4: Select .csproj File -->
                <div class="card">
                    <div class="card-header">Select .csproj File</div>
                    <div class="card-body">
                        @if (SelectedBranchInfo == null || SelectedBranchInfo.FileStructure == null)
                        {
                            <p>No file structure available for the selected branch.</p>
                        }
                        else
                        {
                            var csprojFiles = SelectedBranchInfo.FileStructure.Files
                            .Where(f => f.FileType.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase))
                            .ToList();
                            if (csprojFiles.Count == 0)
                            {
                                <p>No .csproj files found in this branch.</p>
                            }
                            else
                            {
                                <label class="form-label">Choose a .csproj file:</label>
                                <select class="form-select"  @onchange="CsProjectFileChangedWizard">
                                    <option value="">-- Select .csproj file --</option>
                                    @foreach (var file in csprojFiles.OrderBy(f => f.Path))
                                    {
                                        <option value="@file.Path" selected="@(file.Path == SelectedCsprojPath ? "selected" : null)">@file.Path</option>
                                    }
                                </select>
                            }
                        }
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>

                        <button class="btn btn-primary" @onclick="NextStep">Next</button>
                    </div>
                </div>                                                                      
            } else if (currentStep == 5) {
                <!-- Step 5: Environment Settings -->
                <div class="card">
                    <div class="card-header">Environment Settings</div>
                    <div class="card-body">
                        <p>Select environments to configure (optional):</p>
                        @foreach (var envKey in GlobalSettings.App.EnvironmentOptions.Keys)
                        {
                            <div class="form-check mb-2">
                                <input type="checkbox" class="form-check-input" id="envCheck_@envKey" @onchange="@(e => EnvironmentChangedWizard(envKey, e))" />
                                <label class="form-check-label" for="envCheck_@envKey">@envKey Environment</label>
                            </div>
                            if (EnvSettings.Keys.Contains(envKey))
                            {
                                var envSetting = EnvSettings[envKey];
                                <div class="border p-2 mb-3">
                                    <h6>@envKey Environment Settings</h6>
                                    <label class="form-label">IIS Deployment Type:</label>
                                    <select class="form-select" @onchange="@(e => EnvironmentDeploymentTypeChangedWizard(envKey, e))">
                                        <option value="IISWebsite" selected="@(envSetting.IISDeploymentType == "IISWebsite" ? "selected" : null)">IISWebsite</option>
                                        <option value="IISWebApplication" selected="@(envSetting.IISDeploymentType == "IISWebApplication" ? "selected" : null)">IISWebApplication</option>
                                    </select>

                                    <label class="form-label">Website Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.WebsiteName" />
                                    @if(envSetting.IISDeploymentType == "IISWebApplication")
                                    {
                                        <label class="form-label">Virtual Path:</label>
                                        <input type="text" class="form-control" @bind="envSetting.VirtualPath" placeholder="Enter virtual path" />
                                    }
                                    <label class="form-label">App Pool Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.AppPoolName" />
                                    <label class="form-label">Variable Group Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.VariableGroupName" placeholder="Enter variable group name" />
                                </div>
                            }
                        }
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                        <button class="btn btn-primary" @onclick="NextStep">Next</button>
                    </div>
                </div>
            } else if (currentStep == 6) {
                <!-- Step 6: Pipeline Selection -->
                <div class="card">
                    <div class="card-header">Pipeline Selection</div>
                    <div class="card-body">
                        <label class="form-label">Select Existing Pipeline:</label>
                        <select class="form-select" @onchange="@(e => PipelineChangedWizard(e) )">
                            <option value="">-- Select Pipeline or Create New --</option>
                            @foreach (var group in ReleasePipelinesList.GroupBy(p => p.Path).OrderBy(g => g.Key))
                            {
                                <optgroup label="@group.Key">
                                    @foreach (var pipe in group.OrderBy(p => p.Name))
                                    {
                                        <option value="@pipe.Id"  selected="@(pipe.Id == SelectedPipelineInfo?.Id ? "selected" : null)">@pipe.Name</option>
                                    }
                                </optgroup>
                            }
                        </select>


                        @if (SelectedPipelineId <= 0 || SelectedPipelineId == null)
                        {
                            <div class="mt-3">
                                <label class="form-label">New Pipeline Name:</label>
                                <input type="text" class="form-control" @bind="NewPipelineName" placeholder="Enter pipeline name" />
                            </div>
                        }
                        else
                        {
                            var pipeline = ReleasePipelinesList.FirstOrDefault(p => p.Id == SelectedPipelineId);
                            if (pipeline != null)
                            {
                                <div class="mt-3">
                                    <p><strong>Pipeline Name:</strong> @pipeline.Name</p>
                                    <p><strong>Pipeline Id:</strong> @pipeline.Id</p>
                                    <p><strong>YML File:</strong> @pipeline.YamlFileName</p>
                                </div>
                            }
                        }
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@(SelectedPipelineId <= 0 && string.IsNullOrWhiteSpace(NewPipelineName))">Next</button>
                    </div>
                </div>
            } else if (currentStep == 7) {
                <!-- Step 7: YAML Preview & Save -->
                <div class="card">
                    <div class="card-header">YAML Preview & Save</div>
                    <div class="card-body">
                        <div class="row">
                            <!-- After (Generated YAML) Preview -->
                            <div class="col-md-12">
                                <h6>After (New Version)</h6>
                                <pre class="border p-2" style="height:300px; overflow-y: auto;"></pre>
                            </div>
                        </div>                        
                    </div>
                    <div class="card-footer text-end">
                        <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                        <button class="btn btn-primary" @onclick="SaveYamlChanges">Save YAML Changes</button>
                    </div>
                </div>
            }
        </div>
    </div>

}

@* Page structure code section *@
@code {
    [Parameter] public string? TenantCode { get; set; }

    protected bool _loadedData = false;
    protected bool _loading = false;
    private List<string> _loadingMessages = new List<string>();
    protected string _pageName = "home";

    protected System.Timers.Timer _timer = new System.Timers.Timer();

    public void Dispose() {
        _timer.Dispose();

        Model.OnChange -= OnDataModelUpdated;
        Model.OnSignalRUpdate -= SignalRUpdate;

        Model.Subscribers_OnChange.Remove(_pageName);
        Model.Subscribers_OnSignalRUpdate.Remove(_pageName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
            Model.OnChange += OnDataModelUpdated;
        }

        if (Model.Loaded) {
            if (Model.LoggedIn) {
                if (!_loadedData) {
                    _loadedData = true;
                    await Helpers.ValidateUrl(TenantCode, true);
                    currentStep = 1; // skip the PAT and orgname step if we are logged in
                    // ok so now we are logged in, that means we dont need to collect a PAT or ORGNAME
                    // so for now just go and lookup the projectnames and other orginfo
                    _loading = true;
                    await LoadDevOpsInfoAsync();
                    _loading = false;
                    StateHasChanged();
                }
            } else {
                if (!_loadedData) {
                    _loadedData = true;
                    await Helpers.ValidateUrl(TenantCode, true);
                    _loading = true;
                    OrgName = string.Empty;
                    DevOpsPAT = string.Empty;
                    currentStep = 0; // skip the PAT and orgname step if we are logged in
                    _loading = false;

                    StateHasChanged();
                }
            }
        }
    }

    protected override void OnInitialized()
    {   
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        if (!Model.Subscribers_OnSignalRUpdate.Contains(_pageName)){
            Model.Subscribers_OnSignalRUpdate.Add(_pageName);
            Model.OnSignalRUpdate += SignalRUpdate;
        }

        _timer = new System.Timers.Timer();
        _timer.Interval = 1000;
        _timer.Elapsed += TimerExecuted;
        _timer.AutoReset = true;
        //_timer.Start();

        Model.View = _pageName;
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected async void SignalRUpdate(DataObjects.SignalRUpdate update)
    {
        if (update.UpdateType == DataObjects.SignalRUpdateType.LoadingDevOpsInfoStatusUpdate) {
            _loadingMessages.Add(update.Message);
            Console.WriteLine("update:" + update.Message);
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    protected string LogoUrl
    {
        get {
            string output = "";

            if (Model.Tenant.TenantSettings.Logo.HasValue && Model.Tenant.TenantSettings.Logo != Guid.Empty) {
                output = Model.ApplicationUrl + "File/View/" + ((Guid)Model.Tenant.TenantSettings.Logo).ToString();
            }

            return output;
        }
    }

    protected void TimerExecuted(Object? source, System.Timers.ElapsedEventArgs e)
    {
        Console.WriteLine("Timer Executed");
    }
}


@* App specific variable definition code section *@
@code{
    DataObjects.DevopsOrgInfo? AzureOrgInfo = new ();
    private int currentStep = 0;
    private string? SelectedProjectId = string.Empty;
    private string? SelectedRepoId = string.Empty;
    private string? SelectedBranch = string.Empty;
    private string? SelectedCsprojPath = string.Empty;
    private string? NewPipelineName = string.Empty;
    private int? SelectedPipelineId = 0;
    private string YamlContent = string.Empty;
    private bool IsCreatingPipelineLoading = false;
    
    // This is the PAT and OrgName that will be used when not logged in, allows annonymous access site usage
    private string DevOpsPAT { get; set; } = string.Empty;
    private string OrgName { get; set; } = string.Empty;
    
    // Environment selection state used in the UI (for checkboxes)
    private Dictionary<string, DataObjects.EnvSetting> EnvSettings = new ();

    private string[] StepNames = ["Select PAT", "Select Project", "Select Repository", "Select Branch", "Pipeline Selection", "Select .csproj File", "Environment Settings", "Variable Group Details", "YAML Preview & Save"];

    protected DataObjects.DevopsProjectInfo? SelectedProjectInfo => AzureOrgInfo?.Projects.FirstOrDefault(p => p.ProjectId == SelectedProjectId);
    protected DataObjects.DevopsGitRepoInfo? SelectedRepoInfo => SelectedProjectInfo?.GitRepos.FirstOrDefault(r => r.RepoId == SelectedRepoId);
    protected DataObjects.DevopsGitRepoBranchInfo? SelectedBranchInfo => SelectedRepoInfo?.GitBranches.FirstOrDefault(r => r.BranchName == SelectedBranch);
    protected DataObjects.DevopsPipelineDefinition? SelectedPipelineInfo => ReleasePipelinesList?.FirstOrDefault(p => p.Id == SelectedPipelineId);
    private DataObjects.DevopsPipelineDefinition[] ReleasePipelinesList = [];
    
    // This defines the variables that will be used in the YAML file for naming the artifact, specifying the project name, and enabling 
    // the optional controller version and hello world endpoints via the namespace
    protected Dictionary<string, string> VariablesFileDictionary = new Dictionary<string, string>
    {
        { "CI_ProjectName", "" },
        { "CI_BUILD_CsProjectPath", "" },
        { "CI_BUILD_Namespace", "" }
    };

    // this defines the azure project, repo, and branch we will be using to build the yml
    protected Dictionary<string, string> BuildPipelineDictionary = new Dictionary<string, string>
    {
        { "CODE_PROJECT_NAME", "" },
        { "CODE_REPO_NAME", "" },
        { "CODE_REPO_BRANCH", "" }
    };
    // This defines the variable group names for each environment. The values will be set based on the selected project name.
    protected Dictionary<string, string> EnviornmentVariableGroupDictionary = new Dictionary<string, string>
    {
        { "DEV", "" },
        { "PROD", "" },
        { "CMS", "" }
    };

    
    protected string buildPipelineTemplate = @"
# build-and-deploy-pipeline.yml
name: '$(Date:yyyyMMdd)$(Rev:.r)'

resources:
  repositories:
    - repository: TemplateRepo
      type: git
      name: 'ReleasePipelines/ReleasePipelines'
      ref: 'refs/heads/main'
      trigger: none
    - repository: BuildRepo
      type: git
      name: '{{CODE_PROJECT_NAME}}/{{CODE_REPO_NAME}}'
      ref: 'refs/heads/{{CODE_REPO_BRANCH}}'
      trigger:
        branches:
          include:
            - {{CODE_REPO_BRANCH}}

variables:
  - template: templates/common-variables.yml@TemplateRepo

{{PIPELINE_VARIABLES}}

pool:
  name: 'BuildVM'

stages:
  ####################################################################
  # 0. Pre-Build Stage
  ####################################################################
  - stage: PreBuildStage
    displayName: ""Pre-Build Stage""
    jobs:
      - job: PreBuildJob
        workspace:
          clean: all
        displayName: ""Dump Environment Variables""
        steps:
          - checkout: none
          - download: none
          - template: templates/dump-env-variables-template.yml@TemplateRepo

  # -------------------------------------------------------------------
  # Build Stage: pass the runtime variables to the build template
  # -------------------------------------------------------------------
  - stage: BuildStage
    displayName: ""Build Stage""
    jobs:
      - job: BuildJob
        displayName: ""Build and Publish Application""
        pool:
          name: 'BuildVM'
        steps:
          - template: templates/build-template.yml@TemplateRepo
            parameters:
              buildProjectName: ""$(CI_ProjectName)""
              buildCsProjectPath: ""$(CI_BUILD_CsProjectPath)""
              buildPublishArgs: ""$(CI_PIPELINE_COMMON_PublishArgs)""
              buildNamespace: ""$(CI_BUILD_Namespace)""

  # -------------------------------------------------------------------
  # Info Stage: Basic information (env dump, etc.)
  # -------------------------------------------------------------------
  - stage: InfoStage
    displayName: ""Info Stage""
    jobs:
      - job: InfoJob
        displayName: ""Info Job""
        pool:
          name: 'BuildVM'
        steps:
          - checkout: none
          - download: none
          - task: PowerShell@2
            displayName: ""Just a filler step""
            inputs:
              targetType: 'inline'
              script: |
                Write-Host ""Hello World""

{{DEPLOY_STAGES}}";

}

@* App specific method definition code section *@
@code{

    private void NextStep()
    {
        _loadingMessages = new List<string>();
        if (currentStep < StepNames.Length - 1)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PrevStep()
    {
        _loadingMessages = new List<string>();
        if (currentStep > 0)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private async Task PATandOrgNameChangedWizard()
    {
        _loadingMessages = new List<string>();
        _loading = true;
        StateHasChanged();
        try
        {
            try
            {
                //string? registrationId = null, [FromQuery] string? connectionId = null)
                AzureOrgInfo = await Http.GetFromJsonAsync<DataObjects.DevopsOrgInfo>(DataObjects.Endpoints.DevOps.GetOrgInfoByPat 
                    + "?orgName=" + Uri.EscapeDataString(OrgName) + 
                    "&pat=" + Uri.EscapeDataString(DevOpsPAT)+ 
                    "&connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim())
                );
                if (AzureOrgInfo != null && AzureOrgInfo.Projects != null && AzureOrgInfo.Projects.Any())
                {
                    Console.WriteLine("Loaded DevOps Info successfully.");
                    // now move to the next step
                    NextStep();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading DevOps Info: {ex.Message}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in PATandOrgNameChangedWizard: " + ex.Message);
        }
        finally
        {
            _loading = false;
            await Task.CompletedTask;
        }
    }

    // Event handler wrappers for wizard selections that call the existing methods.
    private async Task ProjectChangedWizard(ChangeEventArgs e)
    {
        try
        {
            // reset everything
            SelectedProjectId = e.Value?.ToString() ?? "";
            SelectedRepoId = "";
            SelectedBranch = "";
            // reset all the choices 
            foreach(var key in BuildPipelineDictionary.Keys)
            {
                BuildPipelineDictionary[key] = "";
            }
            BuildPipelineDictionary["CODE_PROJECT_NAME"] = SelectedProjectInfo?.ProjectName ?? "";

            foreach(var key in VariablesFileDictionary.Keys)
            {
                VariablesFileDictionary[key] = "";
            }            
            VariablesFileDictionary["CI_ProjectName"] = SelectedProjectInfo?.ProjectName ?? "";


            // repopulate the environment variable group names based on the selected project
            foreach(var key in EnviornmentVariableGroupDictionary.Keys)
            {
                EnviornmentVariableGroupDictionary[key] = "";
            }
            foreach(var envKey in EnviornmentVariableGroupDictionary.Keys)
            {
                EnviornmentVariableGroupDictionary[envKey] = $"{SelectedProjectInfo?.ProjectName}_{GlobalSettings.App.VariableGroupNameDefault}_{envKey}";
            }

            Console.WriteLine("Project changed: " + SelectedProjectId);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in ProjectChangedWizard: " + ex.Message);
        }
        await Task.CompletedTask;
    }

    private async Task RepoChangedWizard(ChangeEventArgs e)
    {
        try
        {
            SelectedRepoId = e.Value?.ToString() ?? "";
            SelectedBranch = "";
            BuildPipelineDictionary["CODE_REPO_BRANCH"] = "";
            BuildPipelineDictionary["CODE_REPO_NAME"] = SelectedRepoInfo?.RepoName ?? "";
            Console.WriteLine("Repository changed: " + SelectedRepoId);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in RepoChangedWizard: " + ex.Message);
        }
        await Task.CompletedTask;
    }

    private async Task BranchChangedWizard(ChangeEventArgs e)
    {
        try
        {
            SelectedBranch = e.Value?.ToString() ?? "";
            BuildPipelineDictionary["CODE_REPO_BRANCH"] = SelectedBranch;
            Console.WriteLine("Branch changed: " + SelectedBranch);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in BranchChangedWizard: " + ex.Message);
        }
        await Task.CompletedTask;
    }
    


    private async Task CsProjectFileChangedWizard(ChangeEventArgs e)
    {
        // This method is called when the user selects a .csproj file.
        SelectedCsprojPath = e?.Value?.ToString() ?? "";
        await Task.CompletedTask;
    }
    private async Task EnvironmentChangedWizard(string envKey, ChangeEventArgs e)
    {
        // Convert the event args value to a boolean.
        // Note: For checkboxes, you might consider using @bind for simpler two-way binding.
        bool isChecked = e.Value != null && bool.TryParse(e.Value.ToString(), out bool result) && result;

        // if we just checked it, then we need to create it
        if (isChecked)
        {
            string websiteNameDefault  = GlobalSettings.App.EnvironmentOptions[envKey]?.Hostname ?? string.Empty;
            var setting = new DataObjects.EnvSetting
            {
                EnvName = envKey,
                IISDeploymentType = "IISWebApplication",
                WebsiteName = "" + websiteNameDefault,
                VirtualPath = "/" + SelectedProjectInfo?.ProjectName?.ToLower(),
                AppPoolName = "" + websiteNameDefault + "." + SelectedProjectInfo?.ProjectName?.ToLower(),
                    VariableGroupName = $"{SelectedProjectInfo?.ProjectName}_{GlobalSettings.App.VariableGroupNameDefault}_{envKey}"
            };

            EnvSettings[envKey] = setting; 
        }
        else
        {
            // we just unchecked it and need to clear it out
            if (EnvSettings.ContainsKey(envKey))
            {
                EnvSettings.Remove(envKey);
            }
        }

        await Task.CompletedTask;
    }
    private async Task EnvironmentDeploymentTypeChangedWizard(string envKey, ChangeEventArgs e)
    {
        // Convert the event args value to a string.
        string deploymentType = e.Value?.ToString() ?? "";
        if (EnvSettings.ContainsKey(envKey))
        {
            EnvSettings[envKey].IISDeploymentType = deploymentType;
            if(deploymentType == "IISWebApplication")
            {
                EnvSettings[envKey].VirtualPath = "/" + SelectedProjectInfo?.ProjectName?.ToLower();
            }
            else
            {
                EnvSettings[envKey].VirtualPath = "";
            }
        }
        await Task.CompletedTask;
    }

    private async Task PipelineChangedWizard(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out int pid))
            {
                SelectedPipelineId = pid;
                var pipeline = ReleasePipelinesList.FirstOrDefault(p => p.Id == SelectedPipelineId);
                if (pipeline != null && !string.IsNullOrEmpty(pipeline.YamlFileName))
                {
                    var filePath = pipeline.YamlFileName;

                    try
                    {
                        YamlContent = await Http.GetStringAsync(DataObjects.Endpoints.ReleasePipelines.GetYmlFileContent + "?filePath=" + Uri.EscapeDataString(filePath));
                        Console.WriteLine("Loaded pipeline YAML successfully.");
                    }
                    catch (Exception ex)
                    {
                        YamlContent = "";
                        Console.WriteLine("Error loading pipeline YAML: " + ex.Message);
                    }
                    StateHasChanged();
                }
                else
                {
                    SelectedPipelineId = 0;
                    YamlContent = "";
                }
            }
            else
            {
                SelectedPipelineId = 0;
                YamlContent = "";
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in OnPipelineChanged: " + ex.Message);
        };

        await Task.CompletedTask;
    }

    private DataObjects.EnvSetting GetEnvSetting(string envKey)
    {
        throw new NotImplementedException();
    }

    private async Task NavigateToStep(int i)
    {
        currentStep = i;
        await Task.CompletedTask;
        StateHasChanged();
    }


    protected async Task SaveYamlChanges(MouseEventArgs args)
    {
        // Clear any previous messages
        Model.ClearMessages();
        try
        {
            if (string.IsNullOrWhiteSpace(YamlContent))
            {
                Model.ErrorMessages(new List<string> { "YAML content is empty, nothing to save." });
                return;
            }
            var pipeline = ReleasePipelinesList.FirstOrDefault(p => p.Id == SelectedPipelineId);
            if (pipeline == null || string.IsNullOrWhiteSpace(pipeline.YamlFileName))
            {
                if (!string.IsNullOrWhiteSpace(NewPipelineName))
                {

                }
                else
                {
                    Model.ErrorMessages(new List<string> { "No pipeline selected or YAML file path is missing." });                    
                    return;
                }
            }

            // Notify user that save is in progress.
            Model.Message_Saving();

            // Send the updated YAML content to the API
            var response = await Http.PostAsJsonAsync(
                DataObjects.Endpoints.ReleasePipelines.UpdateYmlFile + "?filePath=" + Uri.EscapeDataString(pipeline.YamlFileName),
                YamlContent);

            // Clear the saving message
            Model.ClearMessages();

            if (response.IsSuccessStatusCode)
            {
   
                YamlContent = await response.Content.ReadAsStringAsync();
                // Inform the user of success.
                Model.Message_Saved("YAML file updated successfully.");
            }
            else
            {
                var errorText = "Failed to update YAML file: " + await response.Content.ReadAsStringAsync();
                Model.ErrorMessages(new List<string> { errorText });
            }
        }
        catch (Exception ex)
        {
            Model.ErrorMessages(new List<string> { "Error while saving YAML: " + ex.Message });
        }
    
    }

    
    string GeneratePipelineVariablesBlock()
    {
        var sb = new System.Text.StringBuilder();
        foreach (var kv in VariablesFileDictionary)
        {
            sb.AppendLine($"  - name: {kv.Key}");
            sb.AppendLine($"    value: \"{kv.Value}\"");
        }
        sb.Append(GenerateEnvVariablesBlock());
        return sb.ToString();
    }

    string GenerateEnvVariablesBlock()
    {
        var sb = new System.Text.StringBuilder();
        // use the global list for ordering
        foreach (var envKey in GlobalSettings.App.EnvironmentOptions.Keys)
        {
            var env = EnvSettings[envKey];
            //add a comment at the start of the yml section
            sb.AppendLine($"# Environment: {env.EnvName}");
            sb.AppendLine($"  - name: CI_{envKey}_IISDeploymentType");
            sb.AppendLine($"    value: \"{env.IISDeploymentType}\"");
            sb.AppendLine($"  - name: CI_{envKey}_WebsiteName");
            sb.AppendLine($"    value: \"{env.WebsiteName}\"");
            sb.AppendLine($"  - name: CI_{envKey}_VirtualPath");
            sb.AppendLine($"    value: \"{env.VirtualPath}\"");
            sb.AppendLine($"  - name: CI_{envKey}_AppPoolName");
            sb.AppendLine($"    value: \"{env.AppPoolName}\"");
            sb.AppendLine($"  - name: CI_{envKey}_VariableGroup");
            sb.AppendLine($"    value: \"{env.VariableGroupName}\"");
            if (!string.IsNullOrWhiteSpace(env.BindingInfo))
            {
                sb.AppendLine($"  - name: CI_{envKey}_BindingInfo");
                sb.AppendLine($"    value: >");
                sb.AppendLine($"      {env.BindingInfo}");
            }
        }
        return sb.ToString();
    }

    string GenerateDeployStages()
    {
        var sb = new System.Text.StringBuilder();
        // use the global list for ordering
        foreach (var envKey in GlobalSettings.App.EnvironmentOptions.Keys)
        {
            var env = EnvSettings[envKey];
            string azureEnv = env.ServerType.Equals("Production", StringComparison.OrdinalIgnoreCase)
                                ? "AzureProd"
                                : env.ServerType.Equals("CMS", StringComparison.OrdinalIgnoreCase)
                                    ? "AzureCMS"
                                    : "AzureDev";
            string basePath = azureEnv switch
            {
                "AzureProd" => "$(CI_PIPELINE_COMMON_ApplicationFolder_PROD)",
                "AzureCMS" => "$(CI_PIPELINE_COMMON_ApplicationFolder_CMS)",
                _ => "$(CI_PIPELINE_COMMON_ApplicationFolder_DEV)"
            };
            string dotNetVersion = azureEnv switch
            {
                "AzureProd" => "$(CI_PIPELINE_COMMON_DotNetVersion_PROD)",
                _ => "$(CI_PIPELINE_COMMON_DotNetVersion_DEV)"
            };
            string appPoolIdentity = azureEnv switch
            {
                "AzureProd" => "$(CI_PIPELINE_COMMON_AppPoolIdentity_PROD)",
                _ => "$(CI_PIPELINE_COMMON_AppPoolIdentity_DEV)"
            };

            sb.AppendLine($"  - stage: Deploy{env.EnvName}Stage");
            sb.AppendLine($"    displayName: \"Deploy to {env.EnvName}\"");
            sb.AppendLine($"    dependsOn: InfoStage");
            sb.AppendLine($"    variables:");
            sb.AppendLine($"      - group: ${{{{ variables.CI_{envKey}_VariableGroup }}}}");
            sb.AppendLine($"    jobs:");
            sb.AppendLine($"      - deployment: Deploy{env.EnvName}");
            sb.AppendLine($"        workspace:");
            sb.AppendLine($"          clean: all");
            sb.AppendLine($"        displayName: \"Deploy to {env.EnvName} (Environment-based)\"");
            sb.AppendLine($"        environment:");
            sb.AppendLine($"          name: \"{azureEnv}\"");
            sb.AppendLine($"          resourceType: \"VirtualMachine\"");
            sb.AppendLine($"        strategy:");
            sb.AppendLine($"          runOnce:");
            sb.AppendLine($"            deploy:");
            sb.AppendLine($"              steps:");
            sb.AppendLine($"                - checkout: none");
            sb.AppendLine($"                - template: templates/dump-env-variables-template.yml@TemplateRepo");
            sb.AppendLine($"                - template: templates/deploy-template.yml@TemplateRepo");
            sb.AppendLine($"                  parameters:");
            sb.AppendLine($"                    envFolderName: \"{env.EnvName}\"");
            sb.AppendLine($"                    basePath: \"{basePath}\"");
            sb.AppendLine($"                    projectName: \"$(CI_ProjectName)\"");
            sb.AppendLine($"                    releaseRetention: \"$(CI_PIPELINE_COMMON_ReleaseRetention)\"");
            sb.AppendLine($"                    IISDeploymentType: \"$(CI_{envKey}_IISDeploymentType)\"");
            sb.AppendLine($"                    WebsiteName: \"$(CI_{envKey}_WebsiteName)\"");
            sb.AppendLine($"                    VirtualPath: \"$(CI_{envKey}_VirtualPath)\"");
            sb.AppendLine($"                    AppPoolName: \"$(CI_{envKey}_AppPoolName)\"");
            sb.AppendLine($"                    DotNetVersion: \"{dotNetVersion}\"");
            sb.AppendLine($"                    AppPoolIdentity: \"{appPoolIdentity}\"");
            if (!string.IsNullOrWhiteSpace(env.BindingInfo))
            {
                sb.AppendLine($"                    CustomBindings: \"$(CI_{envKey}_BindingInfo)\"");
            }
            sb.AppendLine($"                - template: templates/clean-workspace-template.yml@TemplateRepo");
            sb.AppendLine();
        }
        return sb.ToString();
    }

    
    private async Task LoadDevOpsInfoAsync()
    {
        try
        {
            AzureOrgInfo = await Http.GetFromJsonAsync<DataObjects.DevopsOrgInfo>(DataObjects.Endpoints.DevOps.GetWsuEitOrgInfo);
            if (AzureOrgInfo != null && AzureOrgInfo.Projects != null && AzureOrgInfo.Projects.Any())
            {
                Console.WriteLine("Loaded DevOps Info successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DevOps Info: {ex.Message}");
        }
    }
}
